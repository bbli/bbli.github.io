<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software-Design on Benson Li&#39;s Blog</title>
    <link>https://bbli.github.io/tags/software-design/</link>
    <description>Recent content in Software-Design on Benson Li&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 01 Jun 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://bbli.github.io/tags/software-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How MCP Changes the Way We Write Software</title>
      <link>https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 -0700</pubDate>
      <guid>https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#agents-the-current-reality&#34;&gt;Agents: The Current Reality&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#where-generative-ai-excels-today-the-case-for-coding&#34;&gt;Where Generative AI Excels Today: The Case for Coding&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#the-model-context-protocol&#34;&gt;The Model Context Protocol&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#late-binding-decoupling-clients-from-service-details&#34;&gt;Late Binding: Decoupling Clients from Service Details&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#llms-calling-functions-rethinking-interaction&#34;&gt;LLMs Calling Functions: Rethinking Interaction&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#programming-in-the-era-of-llms&#34;&gt;Programming in the Era of LLMs&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#making-unrepresentable-states-unreachable&#34;&gt;Making Unrepresentable States Unreachable&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#visible-error-handling-unwrap-as-llm-guidance&#34;&gt;Visible Error Handling: unwrap() as LLM Guidance&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#the-power-of-descriptive-compiler-messages&#34;&gt;The Power of Descriptive Compiler Messages&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#localized-testing&#34;&gt;Localized Testing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#documentation-as-verified-executable-specification&#34;&gt;Documentation as Verified Executable Specification&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#mcp-chat-debugger&#34;&gt;MCP Chat Debugger&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#agent-monitoring-and-observability-systems&#34;&gt;Agent Monitoring and Observability Systems&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/how_mcp_changes_the_way_we_write_software/#agent-operating-system&#34;&gt;Agent Operating System&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h2 id=&#34;agents-the-current-reality&#34;&gt;Agents: The Current Reality&lt;/h2&gt;&#xA;&lt;p&gt;When we talk about &amp;ldquo;agents&amp;rdquo; in the context of AI today, it&amp;rsquo;s important to clarify what we mean, especially from a reinforcement learning (RL) perspective. Strictly speaking, most current AI systems referred to as agents don&amp;rsquo;t yet fit the classical RL definition.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On the Cost of Code Resuse</title>
      <link>https://bbli.github.io/posts/on_cost_of_code_reuse/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 -0700</pubDate>
      <guid>https://bbli.github.io/posts/on_cost_of_code_reuse/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/on_cost_of_code_reuse/#increases-compile-times-lowers-programmer-productivity&#34;&gt;Increases Compile Times -&amp;gt; Lowers Programmer Productivity&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/on_cost_of_code_reuse/#why-compile-time-is-important&#34;&gt;Why Compile Time is Important&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/on_cost_of_code_reuse/#how-code-reuse-affects-compile-time&#34;&gt;How Code Reuse affects Compile Time&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/on_cost_of_code_reuse/#harder-to-change-and-doesn-t-always-create-higher-level-abstractions&#34;&gt;Harder to Change and doesn&amp;rsquo;t always create Higher Level Abstractions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/on_cost_of_code_reuse/#harder-to-understand-debug&#34;&gt;Harder to Understand/Debug&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://bbli.github.io/posts/on_cost_of_code_reuse/#final-thoughts&#34;&gt;Final Thoughts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;h1 id=&#34;increases-compile-times-lowers-programmer-productivity&#34;&gt;Increases Compile Times -&amp;gt; Lowers Programmer Productivity&lt;/h1&gt;&#xA;&lt;p&gt;(Preface: This section will be in the context of C++, though the points will generally apply to other programming languages as well.)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clarifying CRTP with the C&#43;&#43; object model</title>
      <link>https://bbli.github.io/posts/crtp_with_object_model/</link>
      <pubDate>Thu, 20 May 2021 19:36:00 -0700</pubDate>
      <guid>https://bbli.github.io/posts/crtp_with_object_model/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://bbli.github.io/posts/crtp_with_object_model/#how-crtp-works&#34;&gt;How CRTP works&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://bbli.github.io/posts/crtp_with_object_model/#crtp-is-not-template-programming-magic&#34;&gt;CRTP is not &amp;ldquo;template programming magic&amp;rdquo;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;3&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://bbli.github.io/posts/crtp_with_object_model/#we-already-have-static-polymorphism&#34;&gt;We already have static polymorphism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;4&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://bbli.github.io/posts/crtp_with_object_model/#we-already-have-static-implementation-inheritance-dot-dot-dot-except&#34;&gt;We already have static implementation inheritance&amp;hellip;Except&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;!-- raw HTML omitted --&gt;5&lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://bbli.github.io/posts/crtp_with_object_model/#appendix-dynamic-dispatch&#34;&gt;Appendix-Dynamic Dispatch&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;On my first encounter, the Curiously Recurring Template Pattern seemed like magic to me. Apparently, by writing &lt;code&gt;static_cast&amp;lt;T*&amp;gt;(this)-&amp;gt;func()&lt;/code&gt;,  we now have &amp;ldquo;static polymorphism/inheritance&amp;rdquo;. It wasn&amp;rsquo;t until a few months and some c++ &lt;a href=&#34;https://www.youtube.com/watch?v=SShSV%5FiV1Ko&#34;&gt;learning resources&lt;/a&gt; later, that I was finally able to understand CRTP. In this blogpost, I will talk about CRTP from more of a code generation point of view, and hopefully by then end convince you that &amp;ldquo;static polymorphism/inheritance&amp;rdquo; is a misleading description of this pattern.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
