<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Benson Li&#39;s Blog</title>
        <link>https://bbli.github.io/posts/</link>
        <description>Recent content in Posts on Benson Li&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 31 May 2021 00:00:00 -0700</lastBuildDate>
        <atom:link href="https://bbli.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Properties of Go Channels</title>
            <link>https://bbli.github.io/posts/go_channel_properties/</link>
            <pubDate>Mon, 31 May 2021 00:00:00 -0700</pubDate>
            
            <guid>https://bbli.github.io/posts/go_channel_properties/</guid>
            <description>1Consequences of Blocking Synchronization:  1.1Making Channels Non-Blocking + Select   2Consequences of Consumption:  2.1Cannot be easily used as a broadcast mechanism 2.2How about the inverse case?   3Example of when we would want to Consume + Block: Streams: 4Channels Often Come with a Level of Indirection:  4.1Tee Channel 4.2Consequence of Indirection   5Final Remarks  This blog post is a summary of an investigation I did regarding channel vs mutex usage, as most resources I found would just present examples side by side without talking about the properties of mutexes/channels that made one implementation better than other(Or in other words, the why).</description>
            <content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li><!-- raw HTML omitted -->1<!-- raw HTML omitted --> <a href="#consequences-of-blocking-synchronization">Consequences of Blocking Synchronization:</a>
<ul>
<li><!-- raw HTML omitted -->1.1<!-- raw HTML omitted --> <a href="#making-channels-non-blocking-plus-select">Making Channels Non-Blocking + Select</a></li>
</ul>
</li>
<li><!-- raw HTML omitted -->2<!-- raw HTML omitted --> <a href="#consequences-of-consumption">Consequences of Consumption:</a>
<ul>
<li><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> <a href="#cannot-be-easily-used-as-a-broadcast-mechanism">Cannot be easily used as a broadcast mechanism</a></li>
<li><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> <a href="#how-about-the-inverse-case">How about the inverse case?</a></li>
</ul>
</li>
<li><!-- raw HTML omitted -->3<!-- raw HTML omitted --> <a href="#example-of-when-we-would-want-to-consume-plus-block-streams">Example of when we would want to Consume + Block: Streams:</a></li>
<li><!-- raw HTML omitted -->4<!-- raw HTML omitted --> <a href="#channels-often-come-with-a-level-of-indirection">Channels Often Come with a Level of Indirection:</a>
<ul>
<li><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> <a href="#tee-channel">Tee Channel</a></li>
<li><!-- raw HTML omitted -->4.2<!-- raw HTML omitted --> <a href="#consequence-of-indirection">Consequence of Indirection</a></li>
</ul>
</li>
<li><!-- raw HTML omitted -->5<!-- raw HTML omitted --> <a href="#final-remarks">Final Remarks</a></li>
</ul>
<!-- raw HTML omitted -->
<p>This blog post is a summary of an investigation I did regarding channel vs mutex usage, as most resources I found would just present examples side by side without talking about the properties of mutexes/channels that made one implementation better than other(Or in other words, the why).</p>
<h1 id="consequences-of-blocking-synchronization"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> Consequences of Blocking Synchronization:</h1>
<p>Channels implement what <a href="https://greenteapress.com/wp/semaphores/">The Little Book of Semaphores</a> calls &ldquo;the leader follower pattern&rdquo;. If the receiver is not ready, the sender will block and vice versa. This can cause <a href="https://stackoverflow.com/questions/54157836/a-simple-example-about-go-channel-with-deadlock-and-why/54157914">troubles with beginners</a> in Go, as &ldquo;deadlocks&rdquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> can happen in a single threaded context. Furthermore, if you would like one goroutine to signal to another via a Channel, it will necessary block until a receiver is ready. There may be times, however, where you want to do more work afterwards. However, there are methods to work around this, as we shall discuss now.</p>
<h2 id="making-channels-non-blocking-plus-select"><!-- raw HTML omitted -->1.1<!-- raw HTML omitted --> Making Channels Non-Blocking + Select</h2>
<p>One way to achieve non blocking channels is to create your channels with a &ldquo;buffer size&rdquo;(i.e <code>make(chan string,2)</code>). I am not a fan of this, as it breaks my ability to reason locally about code. This is because with a buffered channel, I cannot reason about whether the code in front of me will block or not, as that is dependent on the state of  the buffer, which can only be known at runtime. As jerf puts it in this <a href="https://news.ycombinator.com/item?id=16149856">Hacker News post</a>, buffered channels should mostly be used as a response to your traffic/backpressure, and not as an initial design decision.</p>
<p>Another way would be to combine channels with the <code>select</code> statement. This runs the risk of not sending the message if we break out somewhere else in the for loop. Nevertheless, the <code>select</code> statement is still very powerful as <strong>by polling for the first response, it allows us to vary the degree to which we are blocking</strong>, from one channel to multiple channels to timeout and all the way to &ldquo;never&rdquo;, as shown below.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">for</span> {
    <span style="color:#66d9ef">select</span>{<span style="color:#66d9ef">case</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">our_channel</span>: <span style="color:#66d9ef">break</span>; <span style="color:#66d9ef">default</span>:}

    <span style="color:#75715e">// do stuff until there is a receiver for our_channel
</span><span style="color:#75715e"></span>}</code></pre></td></tr></table>
</div>
</div>
<p>Lastly, use another level of indirection, aka</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// Instead of
</span><span style="color:#75715e"></span><span style="color:#a6e22e">ch</span><span style="color:#f92672">&lt;-</span><span style="color:#e6db74">&#34;finished&#34;</span>
<span style="color:#75715e">// do this
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#a6e22e">fun</span>(){<span style="color:#a6e22e">ch</span><span style="color:#f92672">&lt;-</span><span style="color:#e6db74">&#34;finished&#34;</span>}()</code></pre></td></tr></table>
</div>
</div>
<p>Downside is that if no one receives, we will have a memory leak/the unbounded lifetime perhaps can cause some bugs down the road</p>
<h1 id="consequences-of-consumption"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> Consequences of Consumption:</h1>
<h2 id="cannot-be-easily-used-as-a-broadcast-mechanism"><!-- raw HTML omitted -->2.1<!-- raw HTML omitted --> Cannot be easily used as a broadcast mechanism</h2>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// notifier goroutine
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#a6e22e">do_some_work</span>()
    <span style="color:#a6e22e">work_done</span><span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">struct</span>{}
}()

<span style="color:#75715e">// waiting goroutine 1
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">work_done</span>
    <span style="color:#a6e22e">do_other_stuff_1</span>()
}()
<span style="color:#75715e">// waiting goroutine 2- one of these will receive the signal
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">work_done</span>
    <span style="color:#a6e22e">do_other_stuff_2</span>()
}()</code></pre></td></tr></table>
</div>
</div>
<p>As the above code shows, although we can copy a channel so that multiple readers can listen to it, the sender will only send once and its value will be consumed by only one waiting goroutine. Now, one way to broadcast would be for the sender to hold a send channel for each of its notifiees. This has the disadvantage that the system is either &ldquo;closed&rdquo; to future participants, or we would need additional synchronization on a list data structure.</p>
<p>Thus, unless you know who want to notify up front, a condition variable will probably give you better flexibility.</p>
<h2 id="how-about-the-inverse-case"><!-- raw HTML omitted -->2.2<!-- raw HTML omitted --> How about the inverse case?</h2>
<p>Instead, suppose now that we are the notifiee, and do not know ahead of time who may notify us. In such a case, channels do work here, because <strong>we only need to be notified/consumed once</strong>. For example,</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">event</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">struct</span>{},<span style="color:#ae81ff">0</span>)
<span style="color:#75715e">// notifier goroutine
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">event</span>
    <span style="color:#a6e22e">do_something</span>
}()

<span style="color:#75715e">// anybody in the future
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#a6e22e">do_random_stuff_for_x_seconds</span>()
    <span style="color:#a6e22e">event</span><span style="color:#f92672">&lt;-</span> <span style="color:#66d9ef">struct</span>{}
}()

<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#a6e22e">do_random_stuff_for_y_seconds</span>()
    <span style="color:#a6e22e">event</span><span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">struct</span>{}
}()
<span style="color:#a6e22e">etc</span><span style="color:#f92672">...</span></code></pre></td></tr></table>
</div>
</div>
<p>(Though one may want to add an additional <code>select</code> statement along with a timeout so the goroutines don&rsquo;t leak)</p>
<h1 id="example-of-when-we-would-want-to-consume-plus-block-streams"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> Example of when we would want to Consume + Block: Streams:</h1>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sq</span>(<span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>) <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span> {
    <span style="color:#a6e22e">out</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>)
    <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">in</span> {
            <span style="color:#a6e22e">out</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span>
        }
        close(<span style="color:#a6e22e">out</span>)
    }()
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">out</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>vs Mutex</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">sq</span>(<span style="color:#a6e22e">in_loc</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">int</span>,<span style="color:#a6e22e">in_p</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Semaphore</span>, <span style="color:#a6e22e">in_w</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">Semaphore</span>) (<span style="color:#f92672">*</span><span style="color:#a6e22e">Semaphore</span>,<span style="color:#f92672">*</span><span style="color:#66d9ef">int</span>){
    <span style="color:#a6e22e">sq_out</span><span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#66d9ef">int</span>
    <span style="color:#a6e22e">sq_p</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Semaphore</span>{}
    <span style="color:#a6e22e">sq_w</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Semaphore</span>{}
    <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
        <span style="color:#66d9ef">for</span> {<span style="color:#75715e">// infinite loop so I don&#39;t want to create another variable+synchronization for communication
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">in_p</span>.<span style="color:#a6e22e">wait</span>() <span style="color:#75715e">// wait for previous thread to produce the input
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">local</span> = <span style="color:#f92672">*</span><span style="color:#a6e22e">in_loc</span> <span style="color:#75715e">// read from memory the location the previous thread wrote to
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">in_w</span>.<span style="color:#a6e22e">signal</span>() <span style="color:#75715e">// tell previous thread it can start working again
</span><span style="color:#75715e"></span>            <span style="color:#f92672">*</span><span style="color:#a6e22e">transformed</span> = <span style="color:#a6e22e">local</span><span style="color:#f92672">*</span><span style="color:#a6e22e">local</span>
            <span style="color:#a6e22e">sq_p</span>.<span style="color:#a6e22e">signal</span>()
			<span style="color:#a6e22e">sq_w</span>.<span style="color:#a6e22e">wait</span>()
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sq_out</span>,<span style="color:#a6e22e">sq_p</span>,<span style="color:#a6e22e">sq_w</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>As we can see, channels encapsulate a lot of things! Namely:</p>
<ul>
<li>Termination of source(via <code>close(channel</code>) -&gt; which will propagate to downstream goroutines</li>
<li>location of result/abstracting away consumption behavior</li>
<li>synchronization of threads</li>
</ul>
<p>The reason we want blocking here is because otherwise, the sequence cannot be lazily generated. Additionally, channels allow us to not have raw pointers and semaphores floating around in our codebase, which is a huge gain in writing correct code. Another thing that I would like to note is that because the mutex is not inside a class, its guarantee is only &ldquo;opt in&rdquo;. Namely, the mutex code runs the danger of someone not blocking on <code>sq_p</code> and just reading from <code>sq_out</code> directly. With a channel, this cannot happen. Furthermore, one can specify only read/write &ldquo;facade&rdquo;(by making the return type of the channel <code>&lt;-ch</code> or <code>ch&lt;-</code>) of the channel, whereas with a mutex, one technically has both read and write access to the underlying resource</p>
<h1 id="channels-often-come-with-a-level-of-indirection"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> Channels Often Come with a Level of Indirection:</h1>
<h2 id="tee-channel"><!-- raw HTML omitted -->4.1<!-- raw HTML omitted --> Tee Channel</h2>
<p>(Note: This example was more or less taken from &ldquo;Concurrency in Go&rdquo; by  Katherine Cox-Buday, except for simplicity I removed the code to handle the goroutine leak)</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#a6e22e">tee</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">interface</span>{},) (<span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">interface</span>{}, <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">interface</span>{}) {
    <span style="color:#a6e22e">out1</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">interface</span>{})
    <span style="color:#a6e22e">out2</span> <span style="color:#f92672">:=</span> make(<span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">interface</span>{})
    <span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>() {
        <span style="color:#66d9ef">defer</span> close(<span style="color:#a6e22e">out1</span>)
        <span style="color:#66d9ef">defer</span> close(<span style="color:#a6e22e">out2</span>)
        <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">val</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">range</span> <span style="color:#a6e22e">in</span> {
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">out1</span>, <span style="color:#a6e22e">out2</span> = <span style="color:#a6e22e">out1</span>, <span style="color:#a6e22e">out2</span>
            <span style="color:#66d9ef">for</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">:=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> &lt; <span style="color:#ae81ff">2</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span> {
                <span style="color:#66d9ef">select</span> {
                <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">out1</span><span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">val</span>:
                    <span style="color:#a6e22e">out1</span> = <span style="color:#66d9ef">nil</span>
                <span style="color:#66d9ef">case</span> <span style="color:#a6e22e">out2</span><span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">val</span>:
                    <span style="color:#a6e22e">out2</span> = <span style="color:#66d9ef">nil</span>
                }
            }
        }
    }()
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">out1</span>, <span style="color:#a6e22e">out2</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>vs Mutex Implementation</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// NOTE: For this implementation, we will use closures to avoid dealing with raw memory
</span><span style="color:#75715e"></span><span style="color:#a6e22e">tee</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(<span style="color:#a6e22e">in</span> <span style="color:#f92672">&lt;-</span><span style="color:#66d9ef">chan</span> <span style="color:#66d9ef">int</span>) (<span style="color:#66d9ef">func</span>() (<span style="color:#66d9ef">int</span>,<span style="color:#66d9ef">bool</span>), <span style="color:#66d9ef">func</span>() (<span style="color:#66d9ef">int</span>,<span style="color:#66d9ef">bool</span>)) {
    <span style="color:#a6e22e">mu</span> = <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">Sync</span>.<span style="color:#a6e22e">Mutex</span>{}
    <span style="color:#a6e22e">c1</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">NewCond</span>(<span style="color:#a6e22e">mu</span>)
    <span style="color:#a6e22e">c2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">NewCond</span>(<span style="color:#a6e22e">mu</span>)
    <span style="color:#a6e22e">handle1_status</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
    <span style="color:#a6e22e">handle2_status</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">false</span>
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">val</span> <span style="color:#66d9ef">int</span>
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">done</span> <span style="color:#66d9ef">bool</span>

    <span style="color:#a6e22e">handle1</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(){
        <span style="color:#a6e22e">mu</span>.<span style="color:#a6e22e">Lock</span>()
        <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">mu</span>.<span style="color:#a6e22e">UnLock</span>()
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">done</span>){<span style="color:#66d9ef">return</span> (<span style="color:#ae81ff">0</span>,<span style="color:#a6e22e">done</span>)}
        <span style="color:#a6e22e">while</span> (<span style="color:#a6e22e">handle1_status</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span>){<span style="color:#a6e22e">c1</span>.<span style="color:#a6e22e">Wait</span>()}
        <span style="color:#a6e22e">handle1_status</span> = <span style="color:#66d9ef">true</span>

        <span style="color:#75715e">// Case 1: we are first to grab
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">handle2_status</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span>){
            <span style="color:#a6e22e">val</span>,<span style="color:#a6e22e">done</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">in</span>
            <span style="color:#a6e22e">local_val</span> = <span style="color:#a6e22e">val</span>
            <span style="color:#a6e22e">local_done</span> = <span style="color:#a6e22e">done</span>
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">local_val</span>,<span style="color:#a6e22e">local_done</span>
        }
        <span style="color:#75715e">// Case 2: other handle has already grabbed. If so, reset
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">local_val</span> = <span style="color:#a6e22e">val</span><span style="color:#75715e">// in case value changes during return
</span><span style="color:#75715e"></span>            <span style="color:#a6e22e">local_done</span> = <span style="color:#a6e22e">done</span>
            <span style="color:#a6e22e">handle1_status</span> = <span style="color:#66d9ef">false</span>
            <span style="color:#a6e22e">handle2_status</span> = <span style="color:#66d9ef">false</span>
            <span style="color:#a6e22e">c2</span>.<span style="color:#a6e22e">signal</span>()
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">local_val</span>,<span style="color:#a6e22e">local_done</span>
        }
    }
    <span style="color:#a6e22e">handle2</span> <span style="color:#f92672">:=</span> <span style="color:#66d9ef">func</span>(){
        <span style="color:#a6e22e">mu</span>.<span style="color:#a6e22e">Lock</span>()
        <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">mu</span>.<span style="color:#a6e22e">UnLock</span>()
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">done</span>){<span style="color:#66d9ef">return</span> (<span style="color:#ae81ff">0</span>,<span style="color:#a6e22e">done</span>)}
        <span style="color:#a6e22e">while</span> (<span style="color:#a6e22e">handle2_status</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">true</span>){<span style="color:#a6e22e">c2</span>.<span style="color:#a6e22e">Wait</span>()}
        <span style="color:#a6e22e">handle2_status</span> = <span style="color:#66d9ef">true</span>

        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">handle1_status</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">false</span>){
            <span style="color:#a6e22e">val</span> <span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">in</span>
            <span style="color:#a6e22e">local_val</span> = <span style="color:#a6e22e">val</span>
            <span style="color:#a6e22e">local_done</span> = <span style="color:#a6e22e">done</span>
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">local_val</span>,<span style="color:#a6e22e">local_done</span>
        }
        <span style="color:#66d9ef">else</span> {
            <span style="color:#a6e22e">local_val</span> = <span style="color:#a6e22e">val</span>
            <span style="color:#a6e22e">local_done</span> = <span style="color:#a6e22e">done</span>
            <span style="color:#a6e22e">handle1_status</span> = <span style="color:#66d9ef">false</span>
            <span style="color:#a6e22e">handle2_status</span> = <span style="color:#66d9ef">false</span>
            <span style="color:#a6e22e">c1</span>.<span style="color:#a6e22e">signal</span>()
            <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">local_val</span>,<span style="color:#a6e22e">local_done</span>
        }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">handle1</span>, <span style="color:#a6e22e">handle2</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>First, the most striking difference is in the responsibilities of the calling function(<code>value &lt;-out1</code> vs <code>handle1()</code>). The channel implementation is <strong>centralized</strong>, so both <code>out1</code> and <code>out2</code> get routed/delegated to the same goroutine. Once there, the goroutine decides on the next state. In contrast, <code>handle1</code> and <code>handle2</code> each decide by themselves what the next state will be, by &ldquo;peering&rdquo; into the other&rsquo;s state and making a decision based on that. As such, there is a lot of repeat code that differs only in naming of &ldquo;something1&rdquo; vs &ldquo;something2&rdquo;<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Furthermore, the addition of another agent allows both control flow and state to be preserved between function calls(in other words, properties of a coroutine). The mutex implementation can only communicate to other threads by changing state while holding the lock. But on <strong>each subsequent function call, the &ldquo;code&rdquo; it calls will be the same</strong>. In contrast, the &ldquo;code&rdquo; that gets called during a channel send is dependent on the section of code it last left off at. To sum it up, this means there will be less <code>if</code> dispatches based on state, as the state has been &ldquo;encoded&rdquo; into the control flow.</p>
<p>Another aspect of that the level of indirection buys us is the ability to selectively listen to a channel (by temporarily setting the reference to <code>nil</code>). Whereas with a mutex, everyone has an equal chance to grab the lock, and thus the while-condition variable pattern in the mutex implementation: as sometimes it may not be the right time to grab, but the <strong>handler has no way of knowing that until it comes in, grab the lock, and inspect state</strong>.</p>
<p>Finally, the local variables in the mutex implementation mostly stems from the lack of encapsulation: When you send a value along a channel, you are making a copy of the value too.</p>
<h2 id="consequence-of-indirection"><!-- raw HTML omitted -->4.2<!-- raw HTML omitted --> Consequence of Indirection</h2>
<p>Consider the following example, where we implement a synchronized object that produces multiples of 3.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// Inside x&#39;s &#34;Constructor&#34;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
<span style="color:#66d9ef">for</span>{
<span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">request_channel</span>
<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">state</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>
<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">receive_channel</span><span style="color:#f92672">&lt;-</span> <span style="color:#a6e22e">old_state</span>
}
}
<span style="color:#a6e22e">fun</span> (<span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">IDGenerator</span>) <span style="color:#a6e22e">next</span>() <span style="color:#66d9ef">int</span>{
<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">request_channel</span> <span style="color:#f92672">&lt;-</span> <span style="color:#e6db74">&#34;get next&#34;</span>
<span style="color:#66d9ef">return</span> <span style="color:#f92672">&lt;-</span><span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">send_channel</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>vs Mutex Implementation</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">IDGenerator</span>) <span style="color:#a6e22e">next</span>() <span style="color:#66d9ef">int</span> {
<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">Lock</span>()
<span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">Unlock</span>()
<span style="color:#a6e22e">old_state</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">state</span>
<span style="color:#a6e22e">x</span>.<span style="color:#a6e22e">state</span> <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>
<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">old_state</span>
}</code></pre></td></tr></table>
</div>
</div>
<p>Functionally, they are more or less the same, though the channel implementation is a bit wordier from needing a send and receive channel<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. The main issue with the channel implementation, however, is that it is essentially a memory leak, as the goroutine will live indefinitely. This can be remedied, though it is somewhat tedious, as destructors/&ldquo;done channels&rdquo; in Go have to be explicitly called(just like <code>free</code> in C), compared to C++/Rust where the compiler will generate the call for you. <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<h1 id="final-remarks"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Final Remarks</h1>
<p>So now that we know about some of the properties of channels, they can hopefully help us make more informed decisions on when to use them. For example, channels are not that great of a choice for broadcasting, as their consumption nature requires us to essentially implement a pub-sub mechanism, and their blocking nature further hinders us from concurrently notifying all listeners/may hang if a listener doesn&rsquo;t respond.</p>
<p>Queues, on the other hand, are consuming and so channels will probably be a better idea for anything that is stream-like. Furthermore, channels are first class citizens when it comes to for loop termination and select statement(and in <code>select's</code> case, the only citizen).</p>
<p>Finally, through their ability to preserve control flow, channels allow us to better express complex synchronization requirements. But with all that said, unless your situation is very stream-like, I personally would suggest using a mutex initially. That is because mutexes allow you to do any type of operation on the state, whereas you would need to create a new channel to put in the <code>select</code> statement of the &ldquo;centralized&rdquo; goroutine. So instead of one blocking mutex, you wil have 2-4 blocking channels or will need to typecast from <code>interface{}</code>. Additonally, mutexes can &ldquo;compose&rdquo; with each other, in the sense of being to atomically change more than one thing at a time. One however, cannot &ldquo;grab&rdquo; two channels at the same time, and so the only solution is to create a channel that manages both resources. Do this a couple times, and you will eventually end up with &ldquo;god&rdquo; channel/goroutine that will be a source of hidden dependencies + concurrency slowdown.  Last but not least, I just find channels sometimes lacking in their ability to  &ldquo;express intent&rdquo; that a mutex or condition variable gives. When reading the type signature <code>chan int</code>, how can I tell if it is being used as a future, mutex, or just data transport? In these situations, <strong>it is the channel that is &ldquo;low level&rdquo;, not the mutex</strong>!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Quotations as technically we are not trying to grab another lock while in possession of one, but rather we default block/sleep until someone &ldquo;signals&rdquo; us&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Alternatives formulations would be to call a closure that generates a closure twice or array style, both of which would require us to program in the general case rather than just 2 tees, which means we have to do additional case analysis. So to keep things simple and to follow Go style, I chose to copy paste in this particular situation.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>As otherwise, values will be precomputed, which may or may not be desirable&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>if you have defined a destructor/Drop trait&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Clarifying CRTP with the C&#43;&#43; object model</title>
            <link>https://bbli.github.io/posts/crtp_with_object_model/</link>
            <pubDate>Thu, 20 May 2021 19:36:00 -0700</pubDate>
            
            <guid>https://bbli.github.io/posts/crtp_with_object_model/</guid>
            <description>1How CRTP works 2CRTP is not &amp;ldquo;template programming magic&amp;rdquo; 3We already have static polymorphism 4We already have static implementation inheritance&amp;hellip;Except 5Appendix-Dynamic Dispatch  On my first encounter, the Curiously Recurring Template Pattern seemed like magic to me. Apparently, by writing static_cast&amp;lt;T*&amp;gt;(this)-&amp;gt;func(), we now have &amp;ldquo;static polymorphism/inheritance&amp;rdquo;. It wasn&amp;rsquo;t until a few months and some c++ learning resources later, that I was finally able to understand CRTP. In this blogpost, I will talk about CRTP from more of a code generation point of view, and hopefully by then end convince you that &amp;ldquo;static polymorphism/inheritance&amp;rdquo; is a misleading description of this pattern.</description>
            <content type="html"><![CDATA[<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<ul>
<li><!-- raw HTML omitted -->1<!-- raw HTML omitted --> <a href="#how-crtp-works">How CRTP works</a></li>
<li><!-- raw HTML omitted -->2<!-- raw HTML omitted --> <a href="#crtp-is-not-template-programming-magic">CRTP is not &ldquo;template programming magic&rdquo;</a></li>
<li><!-- raw HTML omitted -->3<!-- raw HTML omitted --> <a href="#we-already-have-static-polymorphism">We already have static polymorphism</a></li>
<li><!-- raw HTML omitted -->4<!-- raw HTML omitted --> <a href="#we-already-have-static-implementation-inheritance-dot-dot-dot-except">We already have static implementation inheritance&hellip;Except</a></li>
<li><!-- raw HTML omitted -->5<!-- raw HTML omitted --> <a href="#appendix-dynamic-dispatch">Appendix-Dynamic Dispatch</a></li>
</ul>
<!-- raw HTML omitted -->
<p>On my first encounter, the Curiously Recurring Template Pattern seemed like magic to me. Apparently, by writing <code>static_cast&lt;T*&gt;(this)-&gt;func()</code>,  we now have &ldquo;static polymorphism/inheritance&rdquo;. It wasn&rsquo;t until a few months and some c++ <a href="https://www.youtube.com/watch?v=SShSV%5FiV1Ko">learning resources</a> later, that I was finally able to understand CRTP. In this blogpost, I will talk about CRTP from more of a code generation point of view, and hopefully by then end convince you that &ldquo;static polymorphism/inheritance&rdquo; is a misleading description of this pattern.</p>
<h1 id="how-crtp-works"><!-- raw HTML omitted -->1<!-- raw HTML omitted --> How CRTP works</h1>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">template</span> <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BaseT</span>{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> func(){
        <span style="color:#75715e">// Note: the use of pointers instead of references is for pedagogy reasons
</span><span style="color:#75715e"></span>        T<span style="color:#f92672">*</span> derived <span style="color:#f92672">=</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">*&gt;</span>(<span style="color:#66d9ef">this</span>);
        <span style="color:#75715e">// pre function call code
</span><span style="color:#75715e"></span>        derived<span style="color:#f92672">-&gt;</span>do_func1();
        derived<span style="color:#f92672">-&gt;</span>do_func2();
        <span style="color:#75715e">// post function call code
</span><span style="color:#75715e"></span>    }
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> do_func1();
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_func2</span>();
};

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Derived</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> BaseT<span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">&gt;</span>{
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> do_func1(){};
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_func2</span>(){};
};</code></pre></td></tr></table>
</div>
</div>
<p>Here is the general form of the pattern, with some modifications that will come to light by the end of this article. Let us now walk through what <code>foo</code> translates to for this <code>Derived</code> class. When the compiler processes<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> this function, whose <code>func1</code>  does it insert, <code>BaseT&lt;Derived&gt;</code> or <code>Derived</code>?</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">// rough translation
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">func</span>(BaseT<span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">&gt;*</span> <span style="color:#66d9ef">this</span>){
    <span style="color:#75715e">// From now on, generate code as if we have a pointer to Derived(whichc we do)
</span><span style="color:#75715e"></span>    Derived<span style="color:#f92672">*</span> derived <span style="color:#f92672">=</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">*&gt;</span>(<span style="color:#66d9ef">this</span>);
    <span style="color:#75715e">// pre function call code
</span><span style="color:#75715e"></span>    Derived<span style="color:#f92672">::</span>do_func1(derived);
    Derived<span style="color:#f92672">::</span>do_func2(derived);
    <span style="color:#75715e">// post function call code
</span><span style="color:#75715e"></span>}</code></pre></td></tr></table>
</div>
</div>
<p>The way the C++ object model works is that when there are no virtual functions, the compiler inserts the function corresponding with the <strong>whatever the compile time type CURRENTLY is of the object who calls that method</strong> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>Now, that was a bit of a mouthful. Let us walk through another example of using <code>static_cast</code> to help the compiler with name resolution.</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Parent1</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">f</span>(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;}
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Parent2</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">f</span>(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;2&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;}
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Child</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> Parent1,<span style="color:#66d9ef">public</span> Parent2{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">g</span>(){
        Parent2<span style="color:#f92672">*</span> casted <span style="color:#f92672">=</span> <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span>Parent2<span style="color:#f92672">*&gt;</span>(<span style="color:#66d9ef">this</span>);
        casted<span style="color:#f92672">-&gt;</span>f();
        <span style="color:#75715e">// Parent2::f(); // can also be done with explicit scoping
</span><span style="color:#75715e"></span>    }
};</code></pre></td></tr></table>
</div>
</div>
<p>Without the static_cast, the compiler will throw an error, saying <code>f</code> is found in multiple base classes. But by using it, the compiler will no longer look in <code>Child</code> or <code>Parent1</code> during name resolution. One can also use explicit scoping to achieve this, but the difference is that static_cast will walk the class hierarchy until it finds a <code>f</code> . Furthermore explicit scoping requires retyping <code>Parent1</code> on every subsequent member function call.</p>
<p>I find this explanation in terms of &ldquo;manipulating the name resolution path&rdquo; to be much clearer than saying &ldquo;the base class can now access the derived class&rdquo; or &ldquo;we inject the derived class into the base&rdquo; as I have found in other blogs. For all intensive purposes, the compiler thinks it has a Derived object now. And in fact, it is the other way around, that the derived class has access to the base. Which isn&rsquo;t that suprising, as that&rsquo;s basically the definition of how classes work.</p>
<p>So to repeat, after the <code>static_cast</code>, there is no Base anymore. With the fundamental understanding of CRTP down, let us now dispel some myths/confusion around its usage.</p>
<h1 id="crtp-is-not-template-programming-magic"><!-- raw HTML omitted -->2<!-- raw HTML omitted --> CRTP is not &ldquo;template programming magic&rdquo;</h1>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Widget</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">update</span>(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;hi&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;};
};
<span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">void</span> generic_function(<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> x){
    <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">*&gt;</span>(<span style="color:#66d9ef">this</span>)<span style="color:#f92672">-&gt;</span>update();
}
<span style="color:#75715e">// vs
</span><span style="color:#75715e"></span><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">void</span> generic_function2(T<span style="color:#f92672">*</span> x){
    x<span style="color:#f92672">-&gt;</span>update();
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>){
    Widget<span style="color:#f92672">*</span> x <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Widget;
    generic_function<span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>((<span style="color:#66d9ef">void</span><span style="color:#f92672">*</span>)x);
    generic_function2(x);
}</code></pre></td></tr></table>
</div>
</div>
<p>Consider the above example. They both will print &ldquo;hi&rdquo;. The difference is just that we gave the first one a bad input argument, and so we had to &ldquo;compensate&rdquo; via the static_cast. So if you understand static_cast and basic generic programming<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>
there is no reason you shouldn&rsquo;t understand CRTP.</p>
<h1 id="we-already-have-static-polymorphism"><!-- raw HTML omitted -->3<!-- raw HTML omitted --> We already have static polymorphism</h1>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Object1</span>{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> interface(){
        <span style="color:#75715e">// pre function call code
</span><span style="color:#75715e"></span>        impl();
        <span style="color:#75715e">// post function call code
</span><span style="color:#75715e"></span>    }
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
   <span style="color:#66d9ef">void</span> impl(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;a&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;}
};

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Object2</span>{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> interface(){
        <span style="color:#75715e">// Notice we call whatever functions we want here, unlike CRTP
</span><span style="color:#75715e"></span>        impl_a();
        impl_b();
    }
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> impl_a(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;b1&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;}
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">impl_b</span>(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;b2&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;}
};
<span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">BaseT</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">interface</span>(){
        <span style="color:#75715e">// pre function call code
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">*&gt;</span>(<span style="color:#66d9ef">this</span>)<span style="color:#f92672">-&gt;</span>impl();
        <span style="color:#75715e">// post function call code
</span><span style="color:#75715e"></span>    }
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Derived</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> BaseT<span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">&gt;</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">impl</span>(){cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;c&#34;</span> <span style="color:#f92672">&lt;&lt;</span> endl;}
};

<span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">void</span> call_a_function(T<span style="color:#f92672">&amp;</span> x){
    x.interface();
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>){
    Object1 a;
    Object2 b;
    Derived c;
    call_a_function(a);<span style="color:#75715e">// They all work!
</span><span style="color:#75715e"></span>    call_a_function(b);
    call_a_function(c);
}</code></pre></td></tr></table>
</div>
</div>
<p>As we can see, CRTP is not necessary here(and actually is not even a &ldquo;true&rdquo; interface in some sense, as it has already predetermined the implementation). What is really giving us polymorphism is generic programming. Furthermore, inheriting from a CRTP doesn&rsquo;t actually guarantee the Derived class will satisfy the interface. Consider this example</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">BaseT</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">f</span>(){
        <span style="color:#66d9ef">static_cast</span><span style="color:#f92672">&lt;</span>T<span style="color:#f92672">*&gt;</span>(<span style="color:#66d9ef">this</span>)<span style="color:#f92672">-&gt;</span>not_implemented();
    }
};

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Derived</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> BaseT<span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">&gt;</span>{
};

<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">B</span>{
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">f</span>() <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">D</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> B{
};
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>){
    Derived a;
    D b;
}</code></pre></td></tr></table>
</div>
</div>
<p>Comment out the <code>D b;</code> initialization in main, and the code compiles. With it, we get an error. Why? Because abstract base classes force their inheritors to implement the interface, even if the function never gets called. There are no such guarantees, however, with CRTP.(If we do call Derived&rsquo;s <code>f</code> function, we will get an error&hellip;but we basically get the same error had <code>f</code> been a templated free function)<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<h1 id="we-already-have-static-implementation-inheritance-dot-dot-dot-except"><!-- raw HTML omitted -->4<!-- raw HTML omitted --> We already have static implementation inheritance&hellip;Except</h1>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">EngineMixin</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_work</span>();
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">SpecificEngine</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> EngineMixin{
};

<span style="color:#66d9ef">template</span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">typename</span> T<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">BaseT</span>{
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_work</span>();
};
<span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Derived</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> BaseT<span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">&gt;</span>{
};
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>){
    SpecificEngine e;
    Derived d;
    e.work(); <span style="color:#75715e">//They both static dispatch to the same thing!
</span><span style="color:#75715e"></span>    d.work();
}</code></pre></td></tr></table>
</div>
</div>
<p>Let us now consider the other aspect of inheritance, inheritance of functionality. In the above example, <code>SpecificEngine</code> and <code>Derived</code> will both resolve the function call at compile time, as there are no <a href="#appendix-dynamic-dispatch">virtual functions + pointers here</a>. I would like to emphasis this, as I feel some people may think that just because there is a &ldquo;static_cast&rdquo; in CRTP, it is somehow related to the function call being static too. As I have explained above, <code>static_cast</code> <strong>controls what name we dispatch to, and not the type of the dispatch</strong></p>
<p>So given all of this, when exactly should we use CRTP? Let us reconsider the initial example</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BaseT</span>{
<span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> func(){
        <span style="color:#75715e">// pre function call code
</span><span style="color:#75715e"></span>        derived<span style="color:#f92672">-&gt;</span>do_func1();
        derived<span style="color:#f92672">-&gt;</span>do_func2();
        <span style="color:#75715e">// post function call code
</span><span style="color:#75715e"></span>    }
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> do_func1();
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_func2</span>();
};

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Derived</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> BaseT<span style="color:#f92672">&lt;</span>Derived<span style="color:#f92672">&gt;</span>{
<span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
    <span style="color:#66d9ef">void</span> do_func1(){};
    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">do_func2</span>(){};
};</code></pre></td></tr></table>
</div>
</div>
<p>Now, if you look closely, I haven&rsquo;t actually reproduced the initial example! Instead, by removing the static_cast and adding <code>virtual</code> to <code>do_func1/do_func2</code>, I have actually introduced another pattern, known as the &ldquo;NVI idiom&rdquo; or Facade Design Pattern. The purpose of this pattern is the Base class provides most of the code scaffolding/wiring/or public interface, and the Derived class simply needs to &ldquo;fill in the blanks&rdquo;. So if you have been wondering why I have been writing &ldquo;pre function call&rdquo; comments throughout this post, it is because <strong>I want to encourage you to think of CRTP as a &ldquo;static NVI idiom&rdquo;</strong>, and not &ldquo;static inheritance&rdquo;. If all the Base class does is forward to the implementation, one has to wonder &ldquo;What was the point?&rdquo;</p>
<p>As long as you keep this in mind, CRTP should be hard to abuse and then subsequently &ldquo;shoot yourself in the foot&rdquo; with it.</p>
<hr>
<h1 id="appendix-dynamic-dispatch"><!-- raw HTML omitted -->5<!-- raw HTML omitted --> Appendix-Dynamic Dispatch</h1>
<p>(Note: This section may or may not be helpful in understanding how CRTP works. )</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>{
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">walk</span>();
    <span style="color:#66d9ef">virtual</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span>()  ;
    <span style="color:#66d9ef">int</span> data;
};
<span style="color:#75715e">// is roughly
</span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Animal</span>{
    <span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> _vtable;
    <span style="color:#66d9ef">int</span> data;
};
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">update</span>(Animal<span style="color:#f92672">*</span>){};</code></pre></td></tr></table>
</div>
</div>
<p>When you declare a virtual function inside the `Animal` class in C++, the compile will add a pointer inside every created object that points to the same location: the start of `Animal` vtable. In this region of memory, every 8 byte interval(the size of a pointer) will correspond with the address of a virtual function for this object. When virtual functions get called, the following translation happens</p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#75715e">// Note: the use of raw pointers is for pedagogy reasons
</span><span style="color:#75715e"></span>Animal<span style="color:#f92672">*</span> animal <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Animal;
animal<span style="color:#f92672">-&gt;</span>eat();
<span style="color:#75715e">// is roughly
</span><span style="color:#75715e"></span>(<span style="color:#f92672">*</span>(<span style="color:#f92672">*</span>animal._vtable<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>byte))(animal); <span style="color:#75715e">// 1byte offset to get to 2nd virtual function
</span></code></pre></td></tr></table>
</div>
</div>
<p>Note the <code>w</code> is a pointer. Had we declare it as variable, static dispatch would have to happen, even if the <strong>function was declared virtual</strong>. I won&rsquo;t go completely into detail as to why here, but let&rsquo;s just say that given <code>animal</code> is declared on the stack, there is no way to &ldquo;lie&rdquo; and say it is anything but an <code>Animal</code></p>
<p>Finally, the way that this indirection allows for polymorphism is that the dynamic dispatch translation is the same <strong>regardless of what the Animal pointer actually points to</strong></p>
<div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cpp" data-lang="cpp"><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Dog</span><span style="color:#f92672">:</span><span style="color:#66d9ef">public</span> Animal{
    <span style="color:#66d9ef">virtual</span> <span style="color:#a6e22e">eat</span>(){
        <span style="color:#75715e">//something different
</span><span style="color:#75715e"></span>    }
}

Animal<span style="color:#f92672">*</span> dog <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Dog;
dog<span style="color:#f92672">-&gt;</span>eat();
<span style="color:#75715e">// is roughly
</span><span style="color:#75715e"></span>(<span style="color:#f92672">*</span>(<span style="color:#f92672">*</span>dog._vtable<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>byte))(dog);

<span style="color:#75715e">// so basically the same as
</span><span style="color:#75715e">// (*(*animal._vtable+1byte))(animal);
</span></code></pre></td></tr></table>
</div>
</div>
<p>The difference is that the vtable now holds different information. Namely <code>*dog._vtable+1byte</code> now stores the location of <code>Dog::eat()</code> rather than <code>Animal::eat()</code></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Or more precisely decides it is necessary to construct this function&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Let&rsquo;s ignore walking the class hierarchy for now&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>There are no variadic templates, enable_if, or other hocus pocus happening here&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>I will admit that CRTP provides better lookup access to the functionality that a class has, compared to free functions. But unless there is &ldquo;scaffolding&rdquo; code, this can also be done by creating public member functions or just supplying the free functions in the same header as the class&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
    </channel>
</rss>
